# -*- coding: utf-8 -*-
"""Trabajo Final Algoritmia y Programación.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iF30DmLvWbxy_zpHXe2mipOGXf-VN_u3
"""

import time

# FUNCIONES DE VERIFICACIÓN

# Función para verificar seleccion de un número entero
def verificar_entero(mensaje, limite_inf, limite_sup):
  '''
  Genera un bucle que sólo permite avanzar cuando el usuario ingresa un número
  entero dentro del rango [limite_inf - limite_sup] incluyendo extremos.

  La función retorna el valor entero ingresado por el usuario.
  '''
  while True:
    try:
      entrada = input(mensaje)
      seleccion = int(entrada)
      if limite_inf <= seleccion <= limite_sup:
        return seleccion
      else:
        print(f"Por favor seleccione un valor adecuado entre {limite_inf} y {limite_sup} \n")
        time.sleep(2)
    except:
      print("Por favor seleccione un valor adecuado \n")
      time.sleep(2)


# Función para verificar nombres o apellidos
def verificar_nombre(mensaje):
  '''
  Genera un bucle que sólo permite avanzar cuando el usuario ingresa texto
  de al menos 3 letras  y sin números.
  Si el usuario ingresa más de un nombre, se valida que cada nombre tenga al
  al menos 3 letras.

  La función retorna texto ingresado por el usuario.
  '''
  while True:
    validacion = 0
    entrada = input(mensaje)
    palabras = entrada.split()
    if all(palabra.isalpha() for palabra in palabras):
      validacion += 1 # se cuenta como válido
    else:
        print("No incluya números ni caracteres especiales")
    if all(len(palabra) >=3 for palabra in palabras):
      validacion += 1 # se cuenta como válido
    else:
      print("cada nombre debe tener al menos 3 caracteres")
    if validacion == 2:
      return entrada
      break
    else:
      validacion = 0 # reiniciar el contador de validaciones


# Función para verificar número de documento
def verificar_documento(mensaje, limite_inf, limite_sup):
  '''
  Genera un bucle que sólo permite avanzar cuando el usuario ingresa un numero
  de documento válido, con longitud entre [limite_inf - limite_sup] incluyendo
  extremos.

  La función retorna el valor entero ingresado por el usuario.
  '''
  while True:
    validacion = 0
    entrada = input(mensaje)

    if limite_inf <= len(entrada) <= limite_sup:
      validacion += 1 # se cuenta como válido
    else:
      print(f"La longitud debe estar entre {limite_inf} y {limite_sup} caracteres")

    if len(entrada.split())== 1:
      validacion += 1 # se cuenta como válido
    else:
      print("No ingrese espacios en blanco")

    # Se divide en segmentos porque isdigit() es falso para espacios blancos
    if all(segmento.isdigit() for segmento in entrada.split()):
      validacion += 1 # se cuenta como válido
    else:
      print("No ingrese letras ni caracteres especiales")

    if validacion == 3:
      return entrada
      break
    else:
      validacion = 0

def verificar_placa(mensaje):
  '''
  Genera un bucle que sólo permite avanzar cuando el usuario ingresa una placa
  válida de tres letras y tres números.

  La función retorna la placa ingresada por el usuario.
  '''
  while True:
    validacion = 0
    entrada = input(mensaje)
    if len(entrada.split())== 1:
      validacion += 1 # se cuenta como válido
    else:
      print("No ingrese espacios en blanco")
    if len(entrada) == 6:
      validacion += 1 # se cuenta como válido
    else:
      print("La placa debe tener exactamente 6 caracteres")
    if entrada[:3].isalpha():
      validacion += 1 # se cuenta como válido
    else:
      print("Los primeros tres caracteres deben ser letras")
    if entrada[-3:].isdigit():
      validacion += 1 # se cuenta como válido
    else:
      print("Los últimos tres caracteres deben ser números")
    if validacion == 4:
      return entrada[:3].upper() + entrada[3:]
      break

# MENU PRINCIPAL

carro_ascii = """     ____________
   .F............T.
   | .----------. |
   | |',' ',' , | |           _......_             .''''''''''.
   | `----------' |        _+'        `+_        .'            '.
  _|.-. _...._ .-.|_     _/.-. _...._ .-.\\_     _|.-. _...._ .-.|_
 (_)`-' __[]__ `-'(_)   (_)`-' __{}__ `-'(_)   (_)`-' __/\\__ `-'(_)
(....__|Q de A|__....) (....__|Q de A|__....) (....__|Q de A|__....)
 | |    ~~~~~~    | |   | |    ~~~~~~    | |   | |    ~~~~~~    | |
 `-'              `-'   `-'              `-'   `-'              `-'

############################################################
"""

menu = """
\tMENÚ PRINCIPAL PARQUEADERO Q de A
\t\t1.Registrar Usuario
\t\t2.Ingresar Vehiculo
\t\t3.Registrar Vehiculo
\t\t4.Administrador
\t\t5.Salir

############################################################
Por favor, seleccione una opción del menú:"""

bandera = True

while bandera:
  seleccion = verificar_entero(carro_ascii+menu, 1, 5)
  if seleccion == 1:
    print("Registrar Usuario")
    placa = verificar_placa("Por favor ingrese su placa: ")
    nombre = verificar_nombre("Por favor ingrese su nombre completo: ")
    apellido = verificar_nombre("Por favor ingrese sus apellidos: ")
    documento = verificar_documento("Por favor ingrese su documento: ", 3, 15)
    datos = [placa,nombre, apellido, documento]
    break
  elif seleccion == 2:
    print("Ingresar Vehiculo")
    break
  elif seleccion == 3:
    print("Registrar Vehiculo")
    break
  elif seleccion == 4:
    print("Administrador")
    break
  elif seleccion == 5:
    print("Salir")
    break
